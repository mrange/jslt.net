// Implementation file for parser generated by fsyacc
module Jslt.Net.AST.Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

#nowarn "0058"
open Jslt.Net.AST.Core

# 11 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | VARIABLE of (string)
  | PIDENT of (string)
  | IDENT of (string)
  | AS
  | IMPORT
  | DEF
  | FOR
  | SLASH
  | STAR
  | MINUS
  | PLUS
  | SMALLOREQ
  | SMALLER
  | BIGGER
  | BIGOREQ
  | UNEQUALS
  | EQUALS
  | ASSIGN
  | LET
  | RPAREN
  | LPAREN
  | ELSE
  | IF
  | EOF
  | DOT
  | AND
  | OR
  | FALSE
  | TRUE
  | RCURLY
  | LCURLY
  | COLON
  | COMMA
  | RBRACKET
  | LBRACKET
  | STRING of (string)
  | FLOAT of (float)
  | NULL
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_VARIABLE
    | TOKEN_PIDENT
    | TOKEN_IDENT
    | TOKEN_AS
    | TOKEN_IMPORT
    | TOKEN_DEF
    | TOKEN_FOR
    | TOKEN_SLASH
    | TOKEN_STAR
    | TOKEN_MINUS
    | TOKEN_PLUS
    | TOKEN_SMALLOREQ
    | TOKEN_SMALLER
    | TOKEN_BIGGER
    | TOKEN_BIGOREQ
    | TOKEN_UNEQUALS
    | TOKEN_EQUALS
    | TOKEN_ASSIGN
    | TOKEN_LET
    | TOKEN_RPAREN
    | TOKEN_LPAREN
    | TOKEN_ELSE
    | TOKEN_IF
    | TOKEN_EOF
    | TOKEN_DOT
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_FALSE
    | TOKEN_TRUE
    | TOKEN_RCURLY
    | TOKEN_LCURLY
    | TOKEN_COLON
    | TOKEN_COMMA
    | TOKEN_RBRACKET
    | TOKEN_LBRACKET
    | TOKEN_STRING
    | TOKEN_FLOAT
    | TOKEN_NULL
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_prog
    | NONTERM_value
    | NONTERM_object_fields
    | NONTERM_rev_object_fields
    | NONTERM_array_values
    | NONTERM_rev_values

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | VARIABLE _ -> 0 
  | PIDENT _ -> 1 
  | IDENT _ -> 2 
  | AS  -> 3 
  | IMPORT  -> 4 
  | DEF  -> 5 
  | FOR  -> 6 
  | SLASH  -> 7 
  | STAR  -> 8 
  | MINUS  -> 9 
  | PLUS  -> 10 
  | SMALLOREQ  -> 11 
  | SMALLER  -> 12 
  | BIGGER  -> 13 
  | BIGOREQ  -> 14 
  | UNEQUALS  -> 15 
  | EQUALS  -> 16 
  | ASSIGN  -> 17 
  | LET  -> 18 
  | RPAREN  -> 19 
  | LPAREN  -> 20 
  | ELSE  -> 21 
  | IF  -> 22 
  | EOF  -> 23 
  | DOT  -> 24 
  | AND  -> 25 
  | OR  -> 26 
  | FALSE  -> 27 
  | TRUE  -> 28 
  | RCURLY  -> 29 
  | LCURLY  -> 30 
  | COLON  -> 31 
  | COMMA  -> 32 
  | RBRACKET  -> 33 
  | LBRACKET  -> 34 
  | STRING _ -> 35 
  | FLOAT _ -> 36 
  | NULL  -> 37 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_VARIABLE 
  | 1 -> TOKEN_PIDENT 
  | 2 -> TOKEN_IDENT 
  | 3 -> TOKEN_AS 
  | 4 -> TOKEN_IMPORT 
  | 5 -> TOKEN_DEF 
  | 6 -> TOKEN_FOR 
  | 7 -> TOKEN_SLASH 
  | 8 -> TOKEN_STAR 
  | 9 -> TOKEN_MINUS 
  | 10 -> TOKEN_PLUS 
  | 11 -> TOKEN_SMALLOREQ 
  | 12 -> TOKEN_SMALLER 
  | 13 -> TOKEN_BIGGER 
  | 14 -> TOKEN_BIGOREQ 
  | 15 -> TOKEN_UNEQUALS 
  | 16 -> TOKEN_EQUALS 
  | 17 -> TOKEN_ASSIGN 
  | 18 -> TOKEN_LET 
  | 19 -> TOKEN_RPAREN 
  | 20 -> TOKEN_LPAREN 
  | 21 -> TOKEN_ELSE 
  | 22 -> TOKEN_IF 
  | 23 -> TOKEN_EOF 
  | 24 -> TOKEN_DOT 
  | 25 -> TOKEN_AND 
  | 26 -> TOKEN_OR 
  | 27 -> TOKEN_FALSE 
  | 28 -> TOKEN_TRUE 
  | 29 -> TOKEN_RCURLY 
  | 30 -> TOKEN_LCURLY 
  | 31 -> TOKEN_COLON 
  | 32 -> TOKEN_COMMA 
  | 33 -> TOKEN_RBRACKET 
  | 34 -> TOKEN_LBRACKET 
  | 35 -> TOKEN_STRING 
  | 36 -> TOKEN_FLOAT 
  | 37 -> TOKEN_NULL 
  | 40 -> TOKEN_end_of_input
  | 38 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_prog 
    | 3 -> NONTERM_prog 
    | 4 -> NONTERM_value 
    | 5 -> NONTERM_value 
    | 6 -> NONTERM_value 
    | 7 -> NONTERM_value 
    | 8 -> NONTERM_value 
    | 9 -> NONTERM_value 
    | 10 -> NONTERM_value 
    | 11 -> NONTERM_object_fields 
    | 12 -> NONTERM_rev_object_fields 
    | 13 -> NONTERM_rev_object_fields 
    | 14 -> NONTERM_rev_object_fields 
    | 15 -> NONTERM_array_values 
    | 16 -> NONTERM_array_values 
    | 17 -> NONTERM_rev_values 
    | 18 -> NONTERM_rev_values 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 40 
let _fsyacc_tagOfErrorTerminal = 38

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | VARIABLE _ -> "VARIABLE" 
  | PIDENT _ -> "PIDENT" 
  | IDENT _ -> "IDENT" 
  | AS  -> "AS" 
  | IMPORT  -> "IMPORT" 
  | DEF  -> "DEF" 
  | FOR  -> "FOR" 
  | SLASH  -> "SLASH" 
  | STAR  -> "STAR" 
  | MINUS  -> "MINUS" 
  | PLUS  -> "PLUS" 
  | SMALLOREQ  -> "SMALLOREQ" 
  | SMALLER  -> "SMALLER" 
  | BIGGER  -> "BIGGER" 
  | BIGOREQ  -> "BIGOREQ" 
  | UNEQUALS  -> "UNEQUALS" 
  | EQUALS  -> "EQUALS" 
  | ASSIGN  -> "ASSIGN" 
  | LET  -> "LET" 
  | RPAREN  -> "RPAREN" 
  | LPAREN  -> "LPAREN" 
  | ELSE  -> "ELSE" 
  | IF  -> "IF" 
  | EOF  -> "EOF" 
  | DOT  -> "DOT" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | FALSE  -> "FALSE" 
  | TRUE  -> "TRUE" 
  | RCURLY  -> "RCURLY" 
  | LCURLY  -> "LCURLY" 
  | COLON  -> "COLON" 
  | COMMA  -> "COMMA" 
  | RBRACKET  -> "RBRACKET" 
  | LBRACKET  -> "LBRACKET" 
  | STRING _ -> "STRING" 
  | FLOAT _ -> "FLOAT" 
  | NULL  -> "NULL" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | VARIABLE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | PIDENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IDENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | AS  -> (null : System.Object) 
  | IMPORT  -> (null : System.Object) 
  | DEF  -> (null : System.Object) 
  | FOR  -> (null : System.Object) 
  | SLASH  -> (null : System.Object) 
  | STAR  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | SMALLOREQ  -> (null : System.Object) 
  | SMALLER  -> (null : System.Object) 
  | BIGGER  -> (null : System.Object) 
  | BIGOREQ  -> (null : System.Object) 
  | UNEQUALS  -> (null : System.Object) 
  | EQUALS  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | LET  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | RCURLY  -> (null : System.Object) 
  | LCURLY  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | RBRACKET  -> (null : System.Object) 
  | LBRACKET  -> (null : System.Object) 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NULL  -> (null : System.Object) 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 0us; 2us; 5us; 65535us; 0us; 4us; 8us; 25us; 18us; 19us; 22us; 23us; 26us; 27us; 1us; 65535us; 5us; 6us; 1us; 65535us; 5us; 16us; 1us; 65535us; 8us; 9us; 1us; 65535us; 8us; 24us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 11us; 13us; 15us; 17us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 2us; 1us; 3us; 1us; 4us; 1us; 4us; 1us; 4us; 1us; 5us; 1us; 5us; 1us; 5us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 10us; 2us; 11us; 14us; 1us; 13us; 1us; 13us; 1us; 13us; 1us; 14us; 1us; 14us; 1us; 14us; 1us; 14us; 2us; 16us; 18us; 1us; 17us; 1us; 18us; 1us; 18us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 14us; 16us; 18us; 20us; 22us; 24us; 26us; 28us; 30us; 32us; 35us; 37us; 39us; 41us; 43us; 45us; 47us; 49us; 52us; 54us; 56us; |]
let _fsyacc_action_rows = 28
let _fsyacc_actionTableElements = [|8us; 32768us; 23us; 3us; 27us; 14us; 28us; 13us; 30us; 5us; 34us; 8us; 35us; 11us; 36us; 12us; 37us; 15us; 0us; 49152us; 0us; 16385us; 0us; 16386us; 0us; 16387us; 1us; 16396us; 35us; 17us; 1us; 32768us; 29us; 7us; 0us; 16388us; 7us; 16399us; 27us; 14us; 28us; 13us; 30us; 5us; 34us; 8us; 35us; 11us; 36us; 12us; 37us; 15us; 1us; 32768us; 33us; 10us; 0us; 16389us; 0us; 16390us; 0us; 16391us; 0us; 16392us; 0us; 16393us; 0us; 16394us; 1us; 16395us; 32us; 20us; 1us; 32768us; 31us; 18us; 7us; 32768us; 27us; 14us; 28us; 13us; 30us; 5us; 34us; 8us; 35us; 11us; 36us; 12us; 37us; 15us; 0us; 16397us; 1us; 32768us; 35us; 21us; 1us; 32768us; 31us; 22us; 7us; 32768us; 27us; 14us; 28us; 13us; 30us; 5us; 34us; 8us; 35us; 11us; 36us; 12us; 37us; 15us; 0us; 16398us; 1us; 16400us; 32us; 26us; 0us; 16401us; 7us; 32768us; 27us; 14us; 28us; 13us; 30us; 5us; 34us; 8us; 35us; 11us; 36us; 12us; 37us; 15us; 0us; 16402us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 9us; 10us; 11us; 12us; 13us; 15us; 17us; 18us; 26us; 28us; 29us; 30us; 31us; 32us; 33us; 34us; 36us; 38us; 46us; 47us; 49us; 51us; 59us; 60us; 62us; 63us; 71us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 1us; 1us; 3us; 3us; 1us; 1us; 1us; 1us; 1us; 1us; 0us; 3us; 5us; 0us; 1us; 1us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 4us; 5us; 5us; 5us; 6us; 6us; 7us; 7us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 16385us; 16386us; 16387us; 65535us; 65535us; 16388us; 65535us; 65535us; 16389us; 16390us; 16391us; 16392us; 16393us; 16394us; 65535us; 65535us; 65535us; 16397us; 65535us; 65535us; 65535us; 16398us; 65535us; 16401us; 65535us; 16402us; |]
let _fsyacc_reductions ()  =    [| 
# 313 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Core.Ast option)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 322 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'prog)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "Parser.fsy"
                                   _1 
                   )
# 56 "Parser.fsy"
                 : Core.Ast option));
# 333 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "Parser.fsy"
                               None 
                   )
# 59 "Parser.fsy"
                 : 'prog));
# 343 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'value)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "Parser.fsy"
                                 Some _1 
                   )
# 60 "Parser.fsy"
                 : 'prog));
# 354 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'object_fields)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "Parser.fsy"
                                                       Object _2 
                   )
# 63 "Parser.fsy"
                 : 'value));
# 365 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'array_values)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "Parser.fsy"
                                                          Array _2 
                   )
# 64 "Parser.fsy"
                 : 'value));
# 376 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "Parser.fsy"
                                  String _1 
                   )
# 65 "Parser.fsy"
                 : 'value));
# 387 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "Parser.fsy"
                                 Number _1 
                   )
# 66 "Parser.fsy"
                 : 'value));
# 398 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "Parser.fsy"
                                Boolean true 
                   )
# 67 "Parser.fsy"
                 : 'value));
# 408 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "Parser.fsy"
                                 Boolean false 
                   )
# 68 "Parser.fsy"
                 : 'value));
# 418 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "Parser.fsy"
                                Null 
                   )
# 69 "Parser.fsy"
                 : 'value));
# 428 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'rev_object_fields)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "Parser.fsy"
                                                        List.rev _1 
                   )
# 71 "Parser.fsy"
                 : 'object_fields));
# 439 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "Parser.fsy"
                           [] 
                   )
# 74 "Parser.fsy"
                 : 'rev_object_fields));
# 449 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'value)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "Parser.fsy"
                                              [(_1,_3)] 
                   )
# 75 "Parser.fsy"
                 : 'rev_object_fields));
# 461 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'rev_object_fields)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'value)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "Parser.fsy"
                                                                      (_3, _5) :: _1 
                   )
# 76 "Parser.fsy"
                 : 'rev_object_fields));
# 474 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "Parser.fsy"
                           [] 
                   )
# 79 "Parser.fsy"
                 : 'array_values));
# 484 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'rev_values)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "Parser.fsy"
                                      List.rev _1 
                   )
# 80 "Parser.fsy"
                 : 'array_values));
# 495 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'value)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "Parser.fsy"
                                 [_1] 
                   )
# 83 "Parser.fsy"
                 : 'rev_values));
# 506 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'rev_values)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'value)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "Parser.fsy"
                                                  _3 :: _1 
                   )
# 84 "Parser.fsy"
                 : 'rev_values));
|]
# 519 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 41;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : Core.Ast option =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
